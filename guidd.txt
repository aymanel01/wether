===============================================================================
                    FLUTTER WEATHER APP - COMPLETE DEVELOPMENT GUIDE
===============================================================================

This file contains the complete step-by-step guide along with all the code snippets.

===============================================================================
STEP 1: PROJECT SETUP
===============================================================================

1. CREATE PROJECT
   flutter create weather_app
   cd weather_app

2. UPDATE PUBSPEC.YAML

dependencies:
  flutter:
    sdk: flutter
  cupertino_icons: ^1.0.8
  dio: ^5.4.0
  flutter_bloc: ^8.1.3
  get_it: ^7.6.4
  freezed_annotation: ^2.4.1
  json_annotation: ^4.8.1

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^5.0.0
  freezed: ^2.4.6
  json_serializable: ^6.7.1
  build_runner: ^2.4.7

3. INSTALL DEPENDENCIES
   flutter pub get

===============================================================================
STEP 2: FOLDER STRUCTURE
===============================================================================

lib/
├── domain/
│   ├── entities/
│   ├── repositories/
│   └── usecases/
├── data/
│   ├── datasources/
│   ├── models/
│   └── repositories/
├── presentation/
│   ├── bloc/
│   ├── pages/
│   └── widgets/
├── injection/
└── main.dart

===============================================================================
STEP 3: DOMAIN LAYER
===============================================================================

lib/domain/entities/weather_entity.dart
---------------------------------------
import 'package:freezed_annotation/freezed_annotation.dart';
part 'weather_entity.freezed.dart';

@freezed
class WeatherEntity with _$WeatherEntity {
  const factory WeatherEntity({
    required double windSpeed,
    required double temperature,
    required double apparentTemperature,
    required DateTime time,
  }) = _WeatherEntity;
}

lib/domain/repositories/weather_repository.dart
------------------------------------------------
import '../entities/weather_entity.dart';

abstract class WeatherRepository {
  Future<List<WeatherEntity>> getWeatherData();
}

lib/domain/usecases/get_weather_data_usecase.dart
-------------------------------------------------
import '../entities/weather_entity.dart';
import '../repositories/weather_repository.dart';

class GetWeatherDataUseCase {
  final WeatherRepository repository;

  GetWeatherDataUseCase(this.repository);

  Future<List<WeatherEntity>> call() async {
    return await repository.getWeatherData();
  }
}

===============================================================================
STEP 4: DATA LAYER
===============================================================================

lib/data/models/weather_model.dart
----------------------------------
import 'package:freezed_annotation/freezed_annotation.dart';
import '../../domain/entities/weather_entity.dart';

part 'weather_model.freezed.dart';
part 'weather_model.g.dart';

@freezed
class WeatherModel with _$WeatherModel {
  const factory WeatherModel({
    required double windSpeed,
    required double temperature,
    required double apparentTemperature,
    required DateTime time,
  }) = _WeatherModel;

  factory WeatherModel.fromJson(Map<String, dynamic> json) =>
      _$WeatherModelFromJson(json);
}

extension WeatherModelExtension on WeatherModel {
  WeatherEntity toEntity() {
    return WeatherEntity(
      windSpeed: windSpeed,
      temperature: temperature,
      apparentTemperature: apparentTemperature,
      time: time,
    );
  }
}

lib/data/datasources/weather_remote_datasource.dart
----------------------------------------------------
import 'package:dio/dio.dart';
import '../models/weather_model.dart';
import 'weather_mock_datasource.dart';

abstract class WeatherRemoteDataSource {
  Future<List<WeatherModel>> getWeatherData();
}

class WeatherRemoteDataSourceImpl implements WeatherRemoteDataSource {
  final Dio dio;
  final String baseUrl;
  final WeatherMockDataSource mockDataSource;

  WeatherRemoteDataSourceImpl({
    required this.dio,
    this.baseUrl = 'http://127.0.0.1:3000',
    WeatherMockDataSource? mockDataSource,
  }) : mockDataSource = mockDataSource ?? WeatherMockDataSource();

  @override
  Future<List<WeatherModel>> getWeatherData() async {
    try {
      final response = await dio.get(
        '$baseUrl/weather',
        options: Options(
          headers: {'Content-Type': 'application/json'},
          receiveTimeout: const Duration(seconds: 10),
          sendTimeout: const Duration(seconds: 10),
        ),
      );
      if (response.statusCode == 200) {
        return _parseWeatherData(response.data);
      } else {
        throw Exception('API returned ${response.statusCode}');
      }
    } catch (e) {
      print('API failed, using mock data: $e');
      return await mockDataSource.getWeatherData();
    }
  }

  List<WeatherModel> _parseWeatherData(Map<String, dynamic> jsonData) {
    final List<WeatherModel> weatherList = [];
    final data = jsonData['data'];
    if (data != null && data.containsKey('timelines')) {
      final timelines = data['timelines'];
      if (timelines is List && timelines.isNotEmpty) {
        final hourlyData = timelines.firstWhere(
          (timeline) => timeline['timestep'] == '1h',
          orElse: () => timelines.first,
        );
        if (hourlyData != null && hourlyData['intervals'] != null) {
          final intervals = hourlyData['intervals'] as List;
          for (var interval in intervals) {
            final values = interval['values'];
            if (values != null) {
              weatherList.add(
                WeatherModel(
                  windSpeed: (values['windSpeed'] ?? 0.0).toDouble(),
                  temperature: (values['temperature'] ?? 0.0).toDouble(),
                  apparentTemperature: (values['apparentTemperature'] ?? 0.0).toDouble(),
                  time: DateTime.parse(interval['startTime']),
                ),
              );
            }
          }
        }
      }
    }
    return weatherList;
  }
}

lib/data/datasources/weather_mock_datasource.dart
-------------------------------------------------
import '../models/weather_model.dart';

class WeatherMockDataSource {
  Future<List<WeatherModel>> getWeatherData() async {
    await Future.delayed(const Duration(seconds: 1));
    final List<WeatherModel> weatherList = [];
    final now = DateTime.now();

    for (int i = 0; i < 24; i++) {
      final time = now.add(Duration(hours: i));
      final windVariation = (i % 4) * 1.5;
      final tempVariation = (i % 6) * 2.0;
      final apparentTempVariation = (i % 5) * 1.8;

      weatherList.add(
        WeatherModel(
          windSpeed: 8.0 + (i * 0.3) + windVariation,
          temperature: 18.0 + (i * 0.2) + tempVariation,
          apparentTemperature: 17.0 + (i * 0.25) + apparentTempVariation,
          time: time,
        ),
      );
    }
    return weatherList;
  }
}

lib/data/repositories/weather_repository_impl.dart
--------------------------------------------------
import '../../domain/entities/weather_entity.dart';
import '../../domain/repositories/weather_repository.dart';
import '../datasources/weather_remote_datasource.dart';

class WeatherRepositoryImpl implements WeatherRepository {
  final WeatherRemoteDataSource remoteDataSource;

  WeatherRepositoryImpl({required this.remoteDataSource});

  @override
  Future<List<WeatherEntity>> getWeatherData() async {
    final weatherModels = await remoteDataSource.getWeatherData();
    return weatherModels.map((model) => model.toEntity()).toList();
  }
}

===============================================================================
STEP 5: PRESENTATION LAYER (BLoC)
===============================================================================

lib/presentation/bloc/weather_event.dart
----------------------------------------
import 'package:freezed_annotation/freezed_annotation.dart';
part 'weather_event.freezed.dart';

@freezed
class WeatherEvent with _$WeatherEvent {
  const factory WeatherEvent.loadWeatherData() = LoadWeatherData;
  const factory WeatherEvent.refreshWeatherData() = RefreshWeatherData;
}

lib/presentation/bloc/weather_state.dart
----------------------------------------
import 'package:freezed_annotation/freezed_annotation.dart';
import '../../domain/entities/weather_entity.dart';

part 'weather_state.freezed.dart';

@freezed
class WeatherState with _$WeatherState {
  const factory WeatherState.initial() = WeatherInitial;
  const factory WeatherState.loading() = WeatherLoadingState;
  const factory WeatherState.loaded(List<WeatherEntity> weatherData) = WeatherLoaded;
  const factory WeatherState.error(String message) = WeatherErrorState;
}

lib/presentation/bloc/weather_bloc.dart
---------------------------------------
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../domain/usecases/get_weather_data_usecase.dart';
import 'weather_event.dart';
import 'weather_state.dart';

class WeatherBloc extends Bloc<WeatherEvent, WeatherState> {
  final GetWeatherDataUseCase getWeatherDataUseCase;

  WeatherBloc({required this.getWeatherDataUseCase})
      : super(const WeatherState.initial()) {
    on<LoadWeatherData>(_onLoadWeatherData);
    on<RefreshWeatherData>(_onRefreshWeatherData);
  }

  Future<void> _onLoadWeatherData(
      LoadWeatherData event, Emitter<WeatherState> emit) async {
    await _loadWeatherData(emit);
  }

  Future<void> _onRefreshWeatherData(
      RefreshWeatherData event, Emitter<WeatherState> emit) async {
    await _loadWeatherData(emit);
  }

  Future<void> _loadWeatherData(Emitter<WeatherState> emit) async {
    emit(const WeatherState.loading());
    try {
      final weatherData = await getWeatherDataUseCase.call();
      emit(WeatherState.loaded(weatherData));
    } catch (e) {
      emit(WeatherState.error(e.toString()));
    }
  }
}

===============================================================================
STEP 6: UI WIDGETS AND PAGES
===============================================================================

(WeatherLoading, WeatherError, WeatherList, WeatherCard, WeatherDetailPage, WeatherPage)
-- Refer to the detailed code from the guide above --

===============================================================================
STEP 7: DEPENDENCY INJECTION
===============================================================================

lib/injection/injection_container.dart
--------------------------------------
import 'package:get_it/get_it.dart';
import 'package:dio/dio.dart';
import '../data/datasources/weather_remote_datasource.dart';
import '../data/repositories/weather_repository_impl.dart';
import '../domain/repositories/weather_repository.dart';
import '../domain/usecases/get_weather_data_usecase.dart';
import '../presentation/bloc/weather_bloc.dart';

final sl = GetIt.instance;

Future<void> init() async {
  sl.registerLazySingleton(() => Dio());
  sl.registerLazySingleton<WeatherRemoteDataSource>(
    () => WeatherRemoteDataSourceImpl(dio: sl()),
  );
  sl.registerLazySingleton<WeatherRepository>(
    () => WeatherRepositoryImpl(remoteDataSource: sl()),
  );
  sl.registerLazySingleton(() => GetWeatherDataUseCase(sl()));
  sl.registerFactory(() => WeatherBloc(getWeatherDataUseCase: sl()));
}

===============================================================================
STEP 8: MAIN APP
===============================================================================

lib/main.dart
--------------
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'injection/injection_container.dart' as di;
import 'presentation/pages/weather_page.dart';
import 'presentation/bloc/weather_bloc.dart';
import 'presentation/bloc/weather_event.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await di.init();
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Weather App',
      theme: ThemeData(colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue)),
      home: BlocProvider(
        create: (context) => di.sl<WeatherBloc>()..add(const WeatherEvent.loadWeatherData()),
        child: const WeatherPage(),
      ),
    );
  }
}
===============================================================================
END OF FILE
===============================================================================
